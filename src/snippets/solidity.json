{
	".source.solidity": {
		"spdx license": {
			"prefix": "spdx", 
			"body": "// SPDX-License-Identifier: MIT",
			"description": "SPDX License"
		},
		"pragma solidity":{
			"prefix": "pragm",
			"body": "pragma solidity ${1:version};"
		},
		"pragma solidity example":{
			"prefix": "pragm-ex",
			"body": "pragma solidity >=0.5.0 <0.8.0;"
		},
		"pragma abicoder":{
			"prefix": "pragm-abicoder",
			"body": "pragma abicoder v2;"
		},
		"import contract": {
			"prefix": "imp",
			"body": "import '${1:contract}';"
		},
        "contract declaration": {
			"prefix": "con",
			"body": "contract ${1:Name} {\n\t$0\n}"
		},
		"library declaration": {
			"prefix": "lib",
			"body": "library ${1:Name} {\n\t$0\n}"
		},
		"interface declaration": {
			"prefix": "interf",
			"body": "interface ${1:Name} {\n\t$0\n}"
		},
		"enum declaration": {
			"prefix": "enum",
			"body": "enum ${1:Name} {${2:item1}, ${3:item2} }"
		},
        "mapping declaration":{
            "prefix": "map",
			"body": "mapping (${1:type1}=>${2:type2}) ${3:name};"
		},
		"constructor declaration": {
			"prefix": "const",
			"body": "constructor (${1:type} ${2:name}) public {\n\t$0\n}"
		},
        "function declaration": {
			"prefix": "func",
			"body": "function ${1:name}(${2:type} ${3:name}) {\n\t$0\n}"
		},
        "function return declaration": {
			"prefix": "funcr",
			"body": "function ${1:name}(${2:type} ${3:name}) returns (${4:type} ${5:name}) {\n\t$0\n}"
		}
        ,
        "function view declaration": {
			"prefix": "funcrview",
			"body": "function ${1:name}(${2:type} ${3:name}) view public returns (${4:type} ${5:name}) {\n\t$0\n}"
        },
        "event declaration": {
			"prefix": "ev",
			"body": "event ${1:name}(${2:type} ${3:name} $0);"
        },
		"error declaration": {
			"prefix": "error",
			"body": "error ${1:name}(${2:type} ${3:name} $0);"
        },
        "modifier declaration": {
			"prefix": "mod",
			"body": "modifier ${1:name}($2) {\n\t$0_\n}"
        },
        "if else statement": {
			"prefix": "ife",
			"body": "if (${1:condition}) {\n\t$2\n} else {\n\t$0\n}"
		},
        "for statement": {
			"prefix": "for",
			"body": "for (uint256 ${1:index} = 0; $1 < ${2:array}.length; $1${3:++}) {\n\t$0\n}"
		},
		"unchecked" : {
			"prefix": "unchecked",
			"body": "unchecked {\n\t$0\n}"
		},
		"natspec contract": {
			"prefix": "\/\/\/nat_contract",
			"body": "\/\/\/ @title A title that should describe the contract\/interface\r\n\/\/\/ @author The name of the author\r\n\/\/\/ @notice Explain to an end user what this does\r\n\/\/\/ @dev Explain to a developer any extra details",
			"description": "natspec for contract"
		},
		"natspec variable": {
			"prefix": "\/\/\/nat_statevariable",
			"body": "\/\/\/ @notice Explain to an end user what this does\r\n\/\/\/ @dev Explain to a developer any extra details\r\n\/\/\/ @return Documents the return variables of a contract\u2019s function state variable\r\n\/\/\/ @inheritdoc\tCopies all missing tags from the base function (must be followed by the contract name)",
			"description": "natspec for state variable"
		},
		"natspec function": {
			"prefix": "\/\/\/nat_function",
			"body": "\/\/\/ @notice Explain to an end user what this does\r\n\/\/\/ @dev Explain to a developer any extra details\r\n\/\/\/ @param Documents a parameter just like in doxygen (must be followed by parameter name)\r\n\/\/\/ @return Documents the return variables of a contract\u2019s function state variable\r\n\/\/\/ @inheritdoc\tCopies all missing tags from the base function (must be followed by the contract name)",
			"description": "natspec for function"
		},
		"natspec event": {
			"prefix": "\/\/\/nat_event",
			"body": "\/\/\/ @notice Explain to an end user what this does\r\n\/\/\/ @dev Explain to a developer any extra details\r\n\/\/\/ @param Documents a parameter just like in doxygen (must be followed by parameter name)",
			"description": "natspec for event"
		}
		
    }
}